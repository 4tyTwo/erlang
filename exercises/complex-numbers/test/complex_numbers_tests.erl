-module(complex_numbers_tests).

% This file is automatically generated from the exercises canonical data.

-define(TESTED_MODULE, (sut(complex_numbers))).
-define(TEST_VERSION, 1).
-include("exercism.hrl").


imaginary_unit_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(-1, 0),
				 ?TESTED_MODULE:mul(?TESTED_MODULE:new(0, 1),
						    ?TESTED_MODULE:new(0, 1)))).

add_purely_real_numbers_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(3, 0),
				 ?TESTED_MODULE:add(?TESTED_MODULE:new(1, 0),
						    ?TESTED_MODULE:new(2, 0)))).

add_purely_imaginary_numbers_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(0, 3),
				 ?TESTED_MODULE:add(?TESTED_MODULE:new(0, 1),
						    ?TESTED_MODULE:new(0, 2)))).

add_numbers_with_real_and_imaginary_part_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(4, 6),
				 ?TESTED_MODULE:add(?TESTED_MODULE:new(1, 2),
						    ?TESTED_MODULE:new(3, 4)))).

subtract_purely_real_numbers_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(-1, 0),
				 ?TESTED_MODULE:sub(?TESTED_MODULE:new(1, 0),
						    ?TESTED_MODULE:new(2, 0)))).

subtract_purely_imaginary_numbers_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(0, -1),
				 ?TESTED_MODULE:sub(?TESTED_MODULE:new(0, 1),
						    ?TESTED_MODULE:new(0, 2)))).

subtract_numbers_with_real_and_imaginary_part_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(-2, -2),
				 ?TESTED_MODULE:sub(?TESTED_MODULE:new(1, 2),
						    ?TESTED_MODULE:new(3, 4)))).

multiply_purely_real_numbers_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(2, 0),
				 ?TESTED_MODULE:mul(?TESTED_MODULE:new(1, 0),
						    ?TESTED_MODULE:new(2, 0)))).

multiply_purely_imaginary_numbers_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(-2, 0),
				 ?TESTED_MODULE:mul(?TESTED_MODULE:new(0, 1),
						    ?TESTED_MODULE:new(0, 2)))).

multiply_numbers_with_real_and_imaginary_part_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(-5, 10),
				 ?TESTED_MODULE:mul(?TESTED_MODULE:new(1, 2),
						    ?TESTED_MODULE:new(3, 4)))).

divide_purely_real_numbers_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(5.0e-1,
						    0),
				 ?TESTED_MODULE:divide(?TESTED_MODULE:new(1, 0),
						       ?TESTED_MODULE:new(2,
									  0)))).

divide_purely_imaginary_numbers_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(5.0e-1,
						    0),
				 ?TESTED_MODULE:divide(?TESTED_MODULE:new(0, 1),
						       ?TESTED_MODULE:new(0,
									  2)))).

divide_numbers_with_real_and_imaginary_part_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(4.4e-1,
						    8.0e-2),
				 ?TESTED_MODULE:divide(?TESTED_MODULE:new(1, 2),
						       ?TESTED_MODULE:new(3,
									  4)))).

absolute_value_of_a_positive_purely_real_number_test() ->
    ?assert(5 ==
	      ?TESTED_MODULE:abs(?TESTED_MODULE:new(5, 0))).

absolute_value_of_a_negative_purely_real_number_test() ->
    ?assert(5 ==
	      ?TESTED_MODULE:abs(?TESTED_MODULE:new(-5, 0))).

absolute_value_of_a_purely_imaginary_number_with_positive_imaginary_part_test() ->
    ?assert(5 ==
	      ?TESTED_MODULE:abs(?TESTED_MODULE:new(0, 5))).

absolute_value_of_a_purely_imaginary_number_with_negative_imaginary_part_test() ->
    ?assert(5 ==
	      ?TESTED_MODULE:abs(?TESTED_MODULE:new(0, -5))).

absolute_value_of_a_number_with_real_and_imaginary_part_test() ->
    ?assert(5 ==
	      ?TESTED_MODULE:abs(?TESTED_MODULE:new(3, 4))).

conjugate_a_purely_real_number_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(5, 0),
				 ?TESTED_MODULE:conjugate(?TESTED_MODULE:new(5,
									     0)))).

conjugate_a_purely_imaginary_number_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(0, -5),
				 ?TESTED_MODULE:conjugate(?TESTED_MODULE:new(0,
									     5)))).

conjugate_a_number_with_real_and_imaginary_part_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(1, -1),
				 ?TESTED_MODULE:conjugate(?TESTED_MODULE:new(1,
									     1)))).

real_part_of_a_purely_real_number_test() ->
    ?assert(1 ==
	      ?TESTED_MODULE:real(?TESTED_MODULE:new(1, 0))).

real_part_of_a_purely_imaginary_number_test() ->
    ?assert(0 ==
	      ?TESTED_MODULE:real(?TESTED_MODULE:new(0, 1))).

real_part_of_a_number_with_real_and_imaginary_part_test() ->
    ?assert(1 ==
	      ?TESTED_MODULE:real(?TESTED_MODULE:new(1, 2))).

imaginary_part_of_a_purely_real_number_test() ->
    ?assert(0 ==
	      ?TESTED_MODULE:imaginary(?TESTED_MODULE:new(1, 0))).

imaginary_part_of_a_purely_imaginary_number_test() ->
    ?assert(1 ==
	      ?TESTED_MODULE:imaginary(?TESTED_MODULE:new(0, 1))).

imaginary_part_of_a_number_with_real_and_imaginary_part_test() ->
    ?assert(2 ==
	      ?TESTED_MODULE:imaginary(?TESTED_MODULE:new(1, 2))).

eulers_identityformula_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(-1, 0),
				 ?TESTED_MODULE:exp(?TESTED_MODULE:new(0,
								       3.14159265358979311600)))).

exponential_of_0_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(1, 0),
				 ?TESTED_MODULE:exp(?TESTED_MODULE:new(0, 0)))).

exponential_of_a_purely_real_number_test() ->
    ?assert(?TESTED_MODULE:equal(?TESTED_MODULE:new(2.71828182845904509080,
						    0),
				 ?TESTED_MODULE:exp(?TESTED_MODULE:new(1, 0)))).
