%% Based on canonical data version 1.2.0
%% https://github.com/exercism/problem-specifications/raw/master/exercises/largest-series-product/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(largest_series_product_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_finds_the_largest_product_if_span_equals_length_test'() ->
    ?assertEqual(18,
		 largest_series_product:largest_product("29", 2)).

'2_can_find_the_largest_product_of_2_with_numbers_in_order_test'() ->
    ?assertEqual(72,
		 largest_series_product:largest_product("0123456789",
							2)).

'3_can_find_the_largest_product_of_2_test'() ->
    ?assertEqual(48,
		 largest_series_product:largest_product("576802143", 2)).

'4_can_find_the_largest_product_of_3_with_numbers_in_order_test'() ->
    ?assertEqual(504,
		 largest_series_product:largest_product("0123456789",
							3)).

'5_can_find_the_largest_product_of_3_test'() ->
    ?assertEqual(270,
		 largest_series_product:largest_product("1027839564",
							3)).

'6_can_find_the_largest_product_of_5_with_numbers_in_order_test'() ->
    ?assertEqual(15120,
		 largest_series_product:largest_product("0123456789",
							5)).

'7_can_get_the_largest_product_of_a_big_number_test'() ->
    ?assertEqual(23520,
		 largest_series_product:largest_product("731671765313306249192251196744265747423553491"
							"94934",
							6)).

'8_reports_zero_if_the_only_digits_are_zero_test'() ->
    ?assertEqual(0,
		 largest_series_product:largest_product("0000", 2)).

'9_reports_zero_if_all_spans_include_zero_test'() ->
    ?assertEqual(0,
		 largest_series_product:largest_product("99099", 3)).

'10_rejects_span_longer_than_string_length_test'() ->
    ?assertError(_,
		 largest_series_product:largest_product("123", 4)).

'11_reports_1_for_empty_string_and_empty_product_0_span_test'() ->
    ?assertEqual(1,
		 largest_series_product:largest_product([], 0)).

'12_reports_1_for_nonempty_string_and_empty_product_0_span_test'() ->
    ?assertEqual(1,
		 largest_series_product:largest_product("123", 0)).

'13_rejects_empty_string_and_nonzero_span_test'() ->
    ?assertError(_,
		 largest_series_product:largest_product([], 1)).

'14_rejects_invalid_character_in_digits_test'() ->
    ?assertError(_,
		 largest_series_product:largest_product("1234a5", 2)).

'15_rejects_negative_span_test'() ->
    ?assertError(_,
		 largest_series_product:largest_product("12345", -1)).
