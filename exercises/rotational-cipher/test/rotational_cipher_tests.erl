%% Based on canonical data version 1.2.0
%% https://github.com/exercism/problem-specifications/raw/master/exercises/rotational-cipher/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(rotational_cipher_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_rotate_a_by_0_same_output_as_input_test'() ->
    ?assertEqual("a", rotational_cipher:encrypt("a", 0)),
    ?assertEqual("a", rotational_cipher:decrypt("a", 0)).

'2_rotate_a_by_1_test'() ->
    ?assertEqual("b", rotational_cipher:encrypt("a", 1)),
    ?assertEqual("a", rotational_cipher:decrypt("b", 1)).

'3_rotate_a_by_26_same_output_as_input_test'() ->
    ?assertEqual("a", rotational_cipher:encrypt("a", 26)),
    ?assertEqual("a", rotational_cipher:decrypt("a", 26)).

'4_rotate_m_by_13_test'() ->
    ?assertEqual("z", rotational_cipher:encrypt("m", 13)),
    ?assertEqual("m", rotational_cipher:decrypt("z", 13)).

'5_rotate_n_by_13_with_wrap_around_alphabet_test'() ->
    ?assertEqual("a", rotational_cipher:encrypt("n", 13)),
    ?assertEqual("n", rotational_cipher:decrypt("a", 13)).

'6_rotate_capital_letters_test'() ->
    ?assertEqual("TRL",
		 rotational_cipher:encrypt("OMG", 5)),
    ?assertEqual("OMG",
		 rotational_cipher:decrypt("TRL", 5)).

'7_rotate_spaces_test'() ->
    ?assertEqual("T R L",
		 rotational_cipher:encrypt("O M G", 5)),
    ?assertEqual("O M G",
		 rotational_cipher:decrypt("T R L", 5)).

'8_rotate_numbers_test'() ->
    ?assertEqual("Xiwxmrk 1 2 3 xiwxmrk",
		 rotational_cipher:encrypt("Testing 1 2 3 testing", 4)),
    ?assertEqual("Testing 1 2 3 testing",
		 rotational_cipher:decrypt("Xiwxmrk 1 2 3 xiwxmrk", 4)).

'9_rotate_punctuation_test'() ->
    ?assertEqual("Gzo'n zvo, Bmviyhv!",
		 rotational_cipher:encrypt("Let's eat, Grandma!", 21)),
    ?assertEqual("Let's eat, Grandma!",
		 rotational_cipher:decrypt("Gzo'n zvo, Bmviyhv!", 21)).

'10_rotate_all_letters_test'() ->
    ?assertEqual("Gur dhvpx oebja sbk whzcf bire gur ynml "
		 "qbt.",
		 rotational_cipher:encrypt("The quick brown fox jumps over the lazy "
					   "dog.",
					   13)),
    ?assertEqual("The quick brown fox jumps over the lazy "
		 "dog.",
		 rotational_cipher:decrypt("Gur dhvpx oebja sbk whzcf bire gur ynml "
					   "qbt.",
					   13)).
